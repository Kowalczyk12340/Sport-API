<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AfterSplit" xml:space="preserve">
    <value>after split</value>
  </data>
  <data name="Avg" xml:space="preserve">
    <value>Avg</value>
  </data>
  <data name="BoardInfo" xml:space="preserve">
    <value>Board Info is a view in which it is possible to check the list of components by entering the appropriate Part Number or Order Number. The list of components retrieves data from our IFS system and allows you to efficiently search for information and save it in a file with the ".csv" extension.</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="Changeovers" xml:space="preserve">
    <value>Changeovers</value>
  </data>
  <data name="ChangeoversModel" xml:space="preserve">
    <value>Changeover Model is a view in which it is possible to check the list of changeovers by entering the selected date range, appropriate site localization for the company and the production line.  Then it is possible to download the list of changeovers, which retrieves data from the database and allows you to efficiently search for information and perform operations on components. In the end, it is possible to save it in a file with the ".csv" extension.</value>
  </data>
  <data name="Command" xml:space="preserve">
    <value>Command</value>
  </data>
  <data name="Comment" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="ComponentInformation" xml:space="preserve">
    <value>Component Information</value>
  </data>
  <data name="Copyright" xml:space="preserve">
    <value>Copyright</value>
  </data>
  <data name="Count" xml:space="preserve">
    <value>Count</value>
  </data>
  <data name="d" xml:space="preserve">
    <value>d</value>
  </data>
  <data name="Department" xml:space="preserve">
    <value>Department</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="EndTime" xml:space="preserve">
    <value>End Time</value>
  </data>
  <data name="ExportExcel" xml:space="preserve">
    <value>Export to Excel</value>
  </data>
  <data name="Extension" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="Filtering" xml:space="preserve">
    <value>Filtering</value>
  </data>
  <data name="Find" xml:space="preserve">
    <value>Find</value>
  </data>
  <data name="FindDatasheet" xml:space="preserve">
    <value>Find Datasheet</value>
  </data>
  <data name="FindImage" xml:space="preserve">
    <value>Find Image</value>
  </data>
  <data name="FindInSharepoint" xml:space="preserve">
    <value>Find in Sharepoint</value>
  </data>
  <data name="FoundChangeovers" xml:space="preserve">
    <value>Found Changeovers</value>
  </data>
  <data name="FromTime" xml:space="preserve">
    <value>From Time</value>
  </data>
  <data name="Hello" xml:space="preserve">
    <value>Hello</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="IgnoreProto" xml:space="preserve">
    <value>Ignore PROTO and WDR</value>
  </data>
  <data name="Image" xml:space="preserve">
    <value>image</value>
  </data>
  <data name="IsApproved" xml:space="preserve">
    <value>Is approved</value>
  </data>
  <data name="JobDescription" xml:space="preserve">
    <value>Job description</value>
  </data>
  <data name="JobNumber" xml:space="preserve">
    <value>Job Number</value>
  </data>
  <data name="Line" xml:space="preserve">
    <value>Line</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading</value>
  </data>
  <data name="LocationNo" xml:space="preserve">
    <value>Location No</value>
  </data>
  <data name="ManufacturerPartNo" xml:space="preserve">
    <value>Manufacturer PartNo</value>
  </data>
  <data name="Max" xml:space="preserve">
    <value>Max</value>
  </data>
  <data name="Min" xml:space="preserve">
    <value>Min</value>
  </data>
  <data name="NoDataIsAvailable" xml:space="preserve">
    <value>No data is available</value>
  </data>
  <data name="NoMatching" xml:space="preserve">
    <value>No matching records found</value>
  </data>
  <data name="NumberOfItems" xml:space="preserve">
    <value>Number of Items</value>
  </data>
  <data name="OnHand" xml:space="preserve">
    <value>On hand</value>
  </data>
  <data name="Operation" xml:space="preserve">
    <value>Operation</value>
  </data>
  <data name="OperationCalculator" xml:space="preserve">
    <value>Operation Calculator is a view in which, after entering the appropriate Order Number, it is possible to calculate the data, using the calculator created next to the Quantity field for the components downloaded from the database, along with their description. It is also possible to perform calculations for these components, such as: piece time, setup time or total time, everything is done for the appropriate number of pieces previously entered by the user.</value>
  </data>
  <data name="OrderNumber" xml:space="preserve">
    <value>Order Number</value>
  </data>
  <data name="PartNo" xml:space="preserve">
    <value>PartNo</value>
  </data>
  <data name="PartNumber" xml:space="preserve">
    <value>Part Number</value>
  </data>
  <data name="PCBName" xml:space="preserve">
    <value>PCB Name</value>
  </data>
  <data name="PhaseIn" xml:space="preserve">
    <value>Phase in</value>
  </data>
  <data name="PhaseOut" xml:space="preserve">
    <value>Phase out</value>
  </data>
  <data name="PieceTime" xml:space="preserve">
    <value>Piece Time</value>
  </data>
  <data name="Possible" xml:space="preserve">
    <value>It is impossible to download data at the moment!</value>
  </data>
  <data name="ProductAfter" xml:space="preserve">
    <value>Product After</value>
  </data>
  <data name="ProductBefore" xml:space="preserve">
    <value>Product Before</value>
  </data>
  <data name="ProductionApp" xml:space="preserve">
    <value>Production App</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="Reason" xml:space="preserve">
    <value>Reason</value>
  </data>
  <data name="Reference" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="References" xml:space="preserve">
    <value>References</value>
  </data>
  <data name="RefreshFuji" xml:space="preserve">
    <value>Refresh Fuji Database</value>
  </data>
  <data name="Reserved" xml:space="preserve">
    <value>Reserved</value>
  </data>
  <data name="Revision" xml:space="preserve">
    <value>Revision</value>
  </data>
  <data name="SaveCsvOriginalBom" xml:space="preserve">
    <value>Save CSV Original BOM</value>
  </data>
  <data name="ScanfilDevelopers" xml:space="preserve">
    <value>Scanfil Developers</value>
  </data>
  <data name="ScanfilWebsite" xml:space="preserve">
    <value>Scanfil Website</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SearchBy" xml:space="preserve">
    <value>Search By</value>
  </data>
  <data name="SearchInIFS" xml:space="preserve">
    <value>Search in IFS</value>
  </data>
  <data name="SearchValue" xml:space="preserve">
    <value>Search Value</value>
  </data>
  <data name="SelectDepartment" xml:space="preserve">
    <value>Select Department</value>
  </data>
  <data name="SelectLine" xml:space="preserve">
    <value>Select Line</value>
  </data>
  <data name="SetupTime" xml:space="preserve">
    <value>Setup Time</value>
  </data>
  <data name="ShowDeleted" xml:space="preserve">
    <value>Show deleted changeovers</value>
  </data>
  <data name="StartTime" xml:space="preserve">
    <value>Start Time</value>
  </data>
  <data name="Sum" xml:space="preserve">
    <value>Sum</value>
  </data>
  <data name="SumOfHours" xml:space="preserve">
    <value>Sum of Hours</value>
  </data>
  <data name="SumOfHoursAfterSplit" xml:space="preserve">
    <value>Sum of hours after split</value>
  </data>
  <data name="SumOfQuantity" xml:space="preserve">
    <value>Sum of Quantity</value>
  </data>
  <data name="Time" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="TimeDifference" xml:space="preserve">
    <value>Time Difference</value>
  </data>
  <data name="TimePerArt" xml:space="preserve">
    <value>Time/art</value>
  </data>
  <data name="TotalTime" xml:space="preserve">
    <value>Total Time</value>
  </data>
  <data name="TotalTimeAfterSplit" xml:space="preserve">
    <value>Total time after split</value>
  </data>
  <data name="ToTime" xml:space="preserve">
    <value>To Time</value>
  </data>
  <data name="View" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="VisitOur" xml:space="preserve">
    <value>Visit our</value>
  </data>
  <data name="WebApplication" xml:space="preserve">
    <value>It is a web application where you can use the Board Info, Changeovers and Operation Calculator.</value>
  </data>
  <data name="Workstation" xml:space="preserve">
    <value>Workstation</value>
  </data>
</root>