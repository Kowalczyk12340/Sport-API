// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SportWeb.Client.Shared.Matches___kopiować
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\_Imports.razor"
using SportWeb.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\_Imports.razor"
using SportWeb.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\Shared\Matches - kopiować\ProductComponent.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\Shared\Matches - kopiować\ProductComponent.razor"
using SPA.Production.BlazorViews.Shared.Models.Changeovers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\Shared\Matches - kopiować\ProductComponent.razor"
using SPA.Production.BlazorViews.Client.Resources;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\Shared\Matches - kopiować\ProductComponent.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    public partial class ProductComponent : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 72 "C:\Users\Dell\Desktop\c#\SportAPI\SportWeb\Client\Shared\Matches - kopiować\ProductComponent.razor"
       
  private IEnumerable<FoundChangeoverDto> _foundChangeovers;
  private string _searchString = null;
  public int Count { get; set; } = 0;
  public string Changeovers { get; set; } = "Changeovers";
  public TimeSpan Min { get; set; } = TimeSpan.Zero;
  public TimeSpan Max { get; set; } = TimeSpan.Zero;
  public TimeSpan Sum { get; set; } = TimeSpan.Zero;
  public TimeSpan Avg { get; set; } = TimeSpan.Zero;
  private int totalItems;
  private IEnumerable<FoundChangeoverDto> pagedData;
  private FoundChangeoverDto _selectedComponent;
  public bool Disabled { get; set; } = true;
  private MudTable<FoundChangeoverDto> table;
  public IEnumerable<FoundChangeoverDto> AllFoundChangeovers { get; set; } = new List<FoundChangeoverDto>();
  public IEnumerable<CategoryDto> AllCategories { get; set; } = new List<CategoryDto>();
  public IEnumerable<ReasonDto> AllReasons { get; set; } = new List<ReasonDto>();
  [Parameter]
  public EventCallback<FoundChangeoverDto> SelectedComponentChanged { get; set; }
  [Parameter]
  public FoundChangeoverDto SelectedComponent
  {
    get => _selectedComponent;
    set
    {
      if (_selectedComponent == value) return;
      _selectedComponent = value;
      SelectedComponentChanged.InvokeAsync(value);
    }
  }


  private string SelectedRow(FoundChangeoverDto changeoverDto, int index)
  {
    if (changeoverDto == SelectedComponent)
    {
      return "mud-theme-info";
    }
    else
    {
      return "";
    }
  }

  [Parameter]
  public IEnumerable<FoundChangeoverDto> FoundChangeovers
  {
    get => _foundChangeovers;
    set
    {
      if (_foundChangeovers == value) return;
      _foundChangeovers = value;
      if (value.Any())
      {
        GetMax();
        GetMin();
        GetCount();
        GetSum();
        GetAvg();
        GetAllCategories();
        GetAllReasons();
      }
      else
      {
        Count = 0;
        Max = TimeSpan.Zero;
        Min = TimeSpan.Zero;
        Sum = TimeSpan.Zero;
        Avg = TimeSpan.Zero;
        AllCategories = new List<CategoryDto>();
        AllReasons = new List<ReasonDto>();
      }
      StateHasChanged();
    }
  }

  public void GetMin()
  {
    Min = FoundChangeovers.Select(x => x.TimeDifference).Min();
    StateHasChanged();
  }

  public void GetMax()
  {
    Max = FoundChangeovers.Select(x => x.TimeDifference).Max();
    StateHasChanged();
  }

  public void GetCount()
  {
    var count = FoundChangeovers.Count();
    Count = count;
    StateHasChanged();
  }

  public void GetSum()
  {
    foreach (var item in FoundChangeovers)
    {
      Sum += item.TimeDifference;
    }
    StateHasChanged();
  }

  public void GetAvg()
  {
    Avg = Sum / Count;
    StateHasChanged();
  }

  private async Task SaveToDatabase(FoundChangeoverDto changeover)
  {
    await _http.PutAsJsonAsync<FoundChangeoverDto>($"api/changeovers", changeover);
  }

  private async Task GetAllReasons()
  {
    try
    {
      AllReasons = (await _http.GetFromJsonAsync<IEnumerable<ReasonDto>>($"api/changeovers/reasons"));
      StateHasChanged();
    }
    catch (Exception ex)
    {
      throw;
    }
  }

  private async Task GetAllCategories()
  {
    try
    {
      AllCategories = (await _http.GetFromJsonAsync<List<CategoryDto>>($"api/changeovers/categories"));
      StateHasChanged();
    }
    catch (Exception ex)
    {
      var message = ex.Message;
    }
    StateHasChanged();
  }

  /// <summary>
  /// Here we simulate getting the paged, filtered and ordered data from the server
  /// </summary>
  private async Task<TableData<FoundChangeoverDto>> ServerReload(TableState state)
  {
    IEnumerable<FoundChangeoverDto> data = await _http.GetFromJsonAsync<List<FoundChangeoverDto>>("webapi/periodictable");
    await Task.Delay(300);
    data = data.Where(element =>
    {
      if (string.IsNullOrWhiteSpace(_searchString))
        return true;
      if (element.ProductBefore.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        return true;
      if (element.ProductAfter.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        return true;
      if (element.AssignedCategory.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        return true;
      if ($"{element.StartTime} {element.EndTime} {element.TimeDifference} {element.AssignedReason}".Contains(_searchString))
        return true;
      return false;
    }).ToArray();
    totalItems = data.Count();

    pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
    return new TableData<FoundChangeoverDto>() { TotalItems = totalItems, Items = pagedData };
  }

  private void OnSearch(string text)
  {
    _searchString = text;
    table.ReloadServerData();
  }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<Language> _l { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient _http { get; set; }
    }
}
#pragma warning restore 1591
