// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportAPI.Sport.Data;

namespace SportAPI.Migrations
{
    [DbContext(typeof(SportDbContext))]
    [Migration("20220113191915_AddNullableValueForBool")]
    partial class AddNullableValueForBool
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("SportAPI.Sport.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Address", "Sport");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.AuthToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AuthToken", "Sport");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.Coach", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Cash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<long>("SportClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SportClubId");

                    b.ToTable("Coach", "Sport");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.League", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("CountForChampionsLeague")
                        .HasColumnType("int");

                    b.Property<int>("CountForConferenceLeague")
                        .HasColumnType("int");

                    b.Property<int>("CountForDownLeague")
                        .HasColumnType("int");

                    b.Property<int>("CountForEuropeLeague")
                        .HasColumnType("int");

                    b.Property<bool?>("IsHigh")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("League", "Sport");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.Match", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateOfMatch")
                        .HasColumnType("DateTime");

                    b.Property<bool?>("InHouse")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("SportClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("TeamOne")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("TeamTwo")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.HasKey("Id");

                    b.HasIndex("SportClubId");

                    b.ToTable("Match", "Sport");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("BetterFoot")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)");

                    b.Property<long>("SportClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SportClubId");

                    b.ToTable("Player", "Sport");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Role", "Sport");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.SportClub", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasOwnStadium")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("'1'");

                    b.Property<long?>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<string>("SportClubName")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("LeagueId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("SportClub", "Sport");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.Training", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<long>("SportClubId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeOfTraining")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("SportClubId");

                    b.ToTable("Training", "Sport");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User", "Sport");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.Coach", b =>
                {
                    b.HasOne("SportAPI.Sport.Models.SportClub", "SportClub")
                        .WithMany("Coaches")
                        .HasForeignKey("SportClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportClub");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.Match", b =>
                {
                    b.HasOne("SportAPI.Sport.Models.SportClub", "SportClub")
                        .WithMany("Matches")
                        .HasForeignKey("SportClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportClub");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.Player", b =>
                {
                    b.HasOne("SportAPI.Sport.Models.SportClub", "SportClub")
                        .WithMany("Players")
                        .HasForeignKey("SportClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportClub");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.SportClub", b =>
                {
                    b.HasOne("SportAPI.Sport.Models.Address", "Address")
                        .WithOne("SportClub")
                        .HasForeignKey("SportAPI.Sport.Models.SportClub", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportAPI.Sport.Models.League", null)
                        .WithMany("SportClubs")
                        .HasForeignKey("LeagueId");

                    b.HasOne("SportAPI.Sport.Models.User", "User")
                        .WithOne("SportClub")
                        .HasForeignKey("SportAPI.Sport.Models.SportClub", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.Training", b =>
                {
                    b.HasOne("SportAPI.Sport.Models.SportClub", "SportClub")
                        .WithMany("Trainings")
                        .HasForeignKey("SportClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportClub");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.User", b =>
                {
                    b.HasOne("SportAPI.Sport.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.Address", b =>
                {
                    b.Navigation("SportClub");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.League", b =>
                {
                    b.Navigation("SportClubs");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.SportClub", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Matches");

                    b.Navigation("Players");

                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("SportAPI.Sport.Models.User", b =>
                {
                    b.Navigation("SportClub");
                });
#pragma warning restore 612, 618
        }
    }
}
